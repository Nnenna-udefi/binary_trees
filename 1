#include "binary_trees.h"

/**
 * bst_remove -  function that removes a node from a Binary Search Tree
 * @root: pointer to the root node of the tree where you will remove a node
 * @value: value to remove in the tree
 * Return: pointer to the new root node of the tree after
 * removing the desired value
 */
bst_t *bst_remove(bst_t *root, int value)
{
	bst_t *new_root, successor;

	if (root == NULL)
		return (NULL);
	else if (value < root->n)
	{
		root->left = bst_remove(root->left, value);
		return (root);
	}
	else if (value > root->n)
	{
		root->right = bst_remove(root->right, value);
		return (root);
	}
	else
	{
		/* found the node to remove */
		if (root->left == NULL && root->right == NULL)
		{
			/* node is a leaf, just remove it */
			free(root);
			return (NULL);
		}
		else if (root->left == NULL)
		{
			/* node has only right child, replace it */
			new_root = root->right;
			free(root);
			return (new_root);
		}
		else if (root->right == NULL)
		{
			/* node has only left child, replace it */
			new_root = root->left;
			free(root);
			return (new_root);
		}
		else
		{
			successor = root->right;

			while (successor->left != NULL)
				successor = successor->left;

			root->value = sucessor->value;
			root->right = bst_remove(root->right, successor->n);
			return (root);
		}
	}
}
